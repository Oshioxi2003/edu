'use client';

import { useSearchParams, useRouter } from 'next/navigation';
import { useQuery } from '@tanstack/react-query';
import { paymentAPI } from '@/lib/api';
import { Button, Skeleton } from '@/components/ui';
import Link from 'next/link';
import MainLayout from '@/components/layout/MainLayout';

export default function PaymentResultPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  
  // VNPay/MoMo may send different param names
  const orderId = searchParams.get('order_id') || searchParams.get('orderId');
  const vnpayResponseCode = searchParams.get('vnp_ResponseCode');
  const momoResultCode = searchParams.get('resultCode');
  
  // Get order details
  const { data: ordersResponse, isLoading } = useQuery({
    queryKey: ['orders', orderId],
    queryFn: async () => {
      const response = await paymentAPI.getOrders({});
      return response.data;
    },
    enabled: !!orderId,
    refetchInterval: (data) => {
      // Keep refetching if order is still pending
      const orders = data?.results || [];
      const order = orders[0];
      return order?.status === 'pending' ? 3000 : false;
    },
  });

  // Find the order from the list (latest order or matching ID)
  const order = ordersResponse?.results?.[0];

  if (isLoading) {
    return (
      <MainLayout>
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
          <div className="max-w-md w-full px-4">
            <div className="bg-white rounded-xl shadow-card p-8 text-center">
              <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-primary mx-auto mb-4"></div>
              <p className="text-gray-600">ƒêang ki·ªÉm tra thanh to√°n...</p>
            </div>
          </div>
        </div>
      </MainLayout>
    );
  }

  const isSuccess = order?.status === 'paid';
  const isPending = order?.status === 'pending';
  const isFailed = order?.status === 'failed' || order?.status === 'cancelled';

  return (
    <MainLayout>
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12">
      <div className="max-w-md w-full px-4">
        <div className="bg-white rounded-xl shadow-card p-8">
          {/* Success */}
          {isSuccess && (
            <div className="text-center">
              <div className="w-20 h-20 bg-success/10 rounded-full flex items-center justify-center mx-auto mb-6">
                <svg className="w-10 h-10 text-success" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">Thanh to√°n th√†nh c√¥ng!</h1>
              <p className="text-gray-600 mb-8">
                C·∫£m ∆°n b·∫°n ƒë√£ mua kh√≥a h·ªçc. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu h·ªçc ngay b√¢y gi·ªù.
              </p>

              <div className="bg-gray-50 rounded-lg p-4 mb-6 space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">M√£ ƒë∆°n h√†ng:</span>
                  <span className="font-semibold text-gray-900">{order.order_code}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Kh√≥a h·ªçc:</span>
                  <span className="font-semibold text-gray-900">{order.book?.title}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">S·ªë ti·ªÅn:</span>
                  <span className="font-semibold text-primary">{parseFloat(order.amount || 0).toLocaleString('vi-VN')}ƒë</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Ph∆∞∆°ng th·ª©c:</span>
                  <span className="font-semibold text-gray-900">
                    {order.provider === 'vnpay' ? 'VNPay' : 'MoMo'}
                  </span>
                </div>
              </div>

              <div className="space-y-3">
                <Link href={`/course/${order.book?.slug || order.book?.id}`} className="block">
                  <Button variant="primary" className="w-full">
                    B·∫Øt ƒë·∫ßu h·ªçc ngay üöÄ
                  </Button>
                </Link>
                <Link href="/courses" className="block">
                  <Button variant="outline" className="w-full">
                    Xem kh√≥a h·ªçc kh√°c
                  </Button>
                </Link>
              </div>
            </div>
          )}

          {/* Pending */}
          {isPending && (
            <div className="text-center">
              <div className="w-20 h-20 bg-warning/10 rounded-full flex items-center justify-center mx-auto mb-6">
                <svg className="w-10 h-10 text-warning" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">ƒêang x·ª≠ l√Ω...</h1>
              <p className="text-gray-600 mb-8">
                ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω. Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t.
              </p>
              <Button onClick={() => window.location.reload()} variant="outline" className="w-full">
                L√†m m·ªõi trang
              </Button>
            </div>
          )}

          {/* Failed */}
          {isFailed && (
            <div className="text-center">
              <div className="w-20 h-20 bg-error/10 rounded-full flex items-center justify-center mx-auto mb-6">
                <svg className="w-10 h-10 text-error" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">Thanh to√°n th·∫•t b·∫°i</h1>
              <p className="text-gray-600 mb-8">
                R·∫•t ti·∫øc, thanh to√°n c·ªßa b·∫°n kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.
              </p>

              {order?.error_message && (
                <div className="bg-error/10 border border-error/20 rounded-lg p-4 mb-6">
                  <p className="text-sm text-error">{order.error_message}</p>
                </div>
              )}

              <div className="space-y-3">
                <Link href={`/payment?course=${order?.book?.slug || order?.book?.id}`} className="block">
                  <Button variant="primary" className="w-full">
                    Th·ª≠ l·∫°i
                  </Button>
                </Link>
                <Link href="/courses" className="block">
                  <Button variant="outline" className="w-full">
                    V·ªÅ trang kh√≥a h·ªçc
                  </Button>
                </Link>
              </div>
            </div>
          )}

          {/* No order found */}
          {!order && (
            <div className="text-center">
              <div className="text-6xl mb-4">‚ùì</div>
              <h1 className="text-2xl font-bold text-gray-900 mb-2">Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng</h1>
              <p className="text-gray-600 mb-6">
                Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng. Vui l√≤ng ki·ªÉm tra l·∫°i.
              </p>
              <Link href="/courses">
                <Button variant="primary">V·ªÅ trang kh√≥a h·ªçc</Button>
              </Link>
            </div>
          )}
        </div>
      </div>
    </div>
    </MainLayout>
  );
}

